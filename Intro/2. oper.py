# Операції та оператори

# Присвоювання - кортеж до кортежу
x, y = 1, 2 # unpacking/destructuring - розділення кортежу на окремі змінні
x, y = y, x # swap
x,y = y, x + y # Фібоначчі

# Арифметичні
x = 14
y = 6
# форматований рядок - рядок з плейсхолдером
res = "x + y = %d" % (x + y)
res = "%d + %d = %f" % (x, y, x + y)
# оператор "%" є інтерполятором - підставляє значення у плейсхолдери
# ліворуч від нього - рядок (str) з плейсхолдерами по типу %T, де T- 
# позначає тип данних, що підставляються (%d - int, %f - float, %s - str)
# Праворуч - кортеж даних для підстановки. Підстановка іде по порядку -
# "голова" кортежу вставляється у перший незаповнений плейсхолдер
# #
print(res)

print("%d - %d = %f" % (x, y, x - y))
print("%d * %d = %f" % (x, y, x * y))
print("%d / %d = %f" % (x, y, x / y)) # ділення "/" дає дробовий результат
print("%d // %d = %f" % (x, y, x // y)) # ділення "//" дає цілий результат
print("%d ** %d = %f" % (x, y, x ** y))
print("%d %% %d = %f" % (x, y, x % y)) # %% - символ "%"
# для функціональних мов поширено, коли однакові оператори,
# для різних операндів дають різні результати

# Умовний оператор - див. basics.py
x = 10
y = 20 if x < 10 else 5 # аналог тернарного виразу
print(y)
# Оператори циклу
while x > 0:
    print(x, end=" ")
    x -= 1
else : # виконується, якщо було порушення циклової умови
    print()
    
# цикли-ітератори проходять по кортежу -
# для використання імперативних підходів існують генератори послідовних
# кортежів - range
print(range(10)) # range(0, 10) - дані відразу не генеруються створюється "правило" - генератор

print("range(10): ", end=' ')
for i in range(10):
    print(i, end=' ') # range(10):  0 1 2 3 4 5 6 7 8 9
print()

print("range(1, 10): ", end=' ')
for i in range(1, 10):
    print(i, end=' ') # range(1, 10):  1 2 3 4 5 6 7 8 9
print()

print("range(1, 10, 2): ", end=' ')
for i in range(1, 10, 2):
    print(i, end=' ') # range(1, 10, 2):  1 3 5 7 9
print()

# range(start, limit, step): починає з start, додає step, суворо != limit

print("range(10, 1, -1): ", end=' ')
for i in range(10, 1, -1):
    print(i, end=' ') # range(10, 1, -1):  10 9 8 7 6 5 4 3 2
print()